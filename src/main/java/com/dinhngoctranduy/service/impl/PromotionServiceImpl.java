package com.dinhngoctranduy.service.impl;

import com.dinhngoctranduy.model.Promotion;
import com.dinhngoctranduy.model.User;
import com.dinhngoctranduy.model.dto.PromotionRequest;
import com.dinhngoctranduy.model.dto.PromotionResponse;
import com.dinhngoctranduy.repository.PromotionRepository;
import com.dinhngoctranduy.service.EmailService;
import com.dinhngoctranduy.service.PromotionService;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.time.Instant;
import java.time.LocalDate;
import java.time.temporal.ChronoUnit;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.concurrent.CompletableFuture;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
public class PromotionServiceImpl implements PromotionService {

    private final PromotionRepository promotionRepository;
    private final EmailService emailService;

    @Override
    public List<PromotionResponse> getAll() {
        return promotionRepository.findAll().stream()
                .map(this::toResponse)
                .collect(Collectors.toList());
    }

    @Override
    public PromotionResponse getById(Long id) {
        return toResponse(promotionRepository.findById(id)
                .orElseThrow(() -> new NoSuchElementException("Promotion not found")));
    }

    @Override
    public PromotionResponse create(PromotionRequest request) {
        validateRequest(request);
        if (promotionRepository.existsByCode(request.getCode())) {
            throw new IllegalArgumentException("Promotion code already exists");
        }
        Promotion promotion = toEntity(request);
        return toResponse(promotionRepository.save(promotion));
    }

    @Override
    public PromotionResponse update(Long id, PromotionRequest request) {
        validateRequest(request);
        Promotion existing = promotionRepository.findById(id)
                .orElseThrow(() -> new NoSuchElementException("Promotion not found"));

        if (!existing.getCode().equals(request.getCode()) && promotionRepository.existsByCode(request.getCode())) {
            throw new IllegalArgumentException("Promotion code already exists");
        }

        existing.setCode(request.getCode());
        existing.setDescription(request.getDescription());
        existing.setDiscountPercent(request.getDiscountPercent());
        existing.setStartAt(request.getStartAt());
        existing.setEndAt(request.getEndAt());
        existing.setUsageLimit(request.getUsageLimit());

        return toResponse(promotionRepository.save(existing));
    }

    @Override
    public void delete(Long id) {
        Promotion promotion = promotionRepository.findByIdAndActiveTrue(id)
                .orElseThrow(() -> new NoSuchElementException("Promotion not found"));
        promotion.setActive(false);
        promotionRepository.save(promotion);
    }

    @Override
    public PromotionResponse getByCode(String code) {
        Promotion promotion = promotionRepository.findByCodeAndActiveTrue(code)
                .orElseThrow(() -> new NoSuchElementException("Promotion not found"));
        return toResponse(promotion);

    }

    @Override
    public List<PromotionResponse> searchByDescription(String keyword) {
        return promotionRepository.findByDescriptionContainingIgnoreCase(keyword)
                .stream()
                .map(this::toResponse)
                .collect(Collectors.toList());
    }

    private void validateRequest(PromotionRequest request) {
        if (request.getStartAt() != null && request.getEndAt() != null &&
                request.getStartAt().isAfter(request.getEndAt())) {
            throw new IllegalArgumentException("Start time must be before end time");
        }
    }

    private Promotion toEntity(PromotionRequest request) {
        return Promotion.builder()
                .code(request.getCode())
                .description(request.getDescription())
                .discountPercent(request.getDiscountPercent())
                .startAt(request.getStartAt())
                .endAt(request.getEndAt())
                .usageLimit(request.getUsageLimit())
                .active(true)
                .build();
    }

    private PromotionResponse toResponse(Promotion promotion) {
        return PromotionResponse.builder()
                .id(promotion.getId())
                .code(promotion.getCode())
                .description(promotion.getDescription())
                .discountPercent(promotion.getDiscountPercent())
                .startAt(promotion.getStartAt())
                .endAt(promotion.getEndAt())
                .usageLimit(promotion.getUsageLimit())
                .active(promotion.isActive())
                .build();
    }

    public void createAndSendWelcomePromotion(User user) {
        CompletableFuture.runAsync(() -> {
            try {
                String promotionCode = "WELCOME_" + user.getId();

                if (promotionRepository.existsByCode(promotionCode)) {
                    return;
                }

                PromotionRequest welcomeRequest = PromotionRequest.builder()
                        .code(promotionCode)
                        .description("∆Øu ƒë√£i ƒë·∫∑c bi·ªát d√†nh cho th√†nh vi√™n m·ªõi c·ªßa DuyTour!")
                        .discountPercent(15.0) // Gi·∫£m 15%
                        .startAt(Instant.now())
                        .endAt(Instant.now().plus(7, ChronoUnit.DAYS)) // H·∫øt h·∫°n sau 7 ng√†y
                        .usageLimit(1) // D√πng 1 l·∫ßn
                        .build();

                this.create(welcomeRequest);

                String subject = "üéÅ Qu√† ch√†o m·ª´ng t·ª´ DuyTour! M√£ khuy·∫øn m√£i c·ªßa b·∫°n";
                String content = """
                        <h3>C·∫£m ∆°n b·∫°n ƒë√£ tham gia c√πng DuyTour!</h3>
                        <p>ƒê·ªÉ ch√†o m·ª´ng th√†nh vi√™n m·ªõi, ch√∫ng t√¥i xin g·ª≠i t·∫∑ng b·∫°n m·ªôt m√£ khuy·∫øn m√£i ƒë·∫∑c bi·ªát:</p>
                        <p><strong>M√£ khuy·∫øn m√£i:</strong> %s</p>
                        <p><strong>M√¥ t·∫£:</strong> %s</p>
                        <p><strong>Gi·∫£m gi√°:</strong> %.0f%%</p>
                        <p><strong>Hi·ªáu l·ª±c:</strong> M√£ c√≥ gi√° tr·ªã trong 7 ng√†y k·ªÉ t·ª´ h√¥m nay.</p>
                        <p>H√£y nhanh tay ƒë·∫∑t tour v√† nh·∫≠p m√£ khuy·∫øn m√£i khi thanh to√°n ƒë·ªÉ nh·∫≠n ∆∞u ƒë√£i nh√©!</p>
                        <hr>
                        <p style="font-size:12px;">ƒê√¢y l√† email t·ª± ƒë·ªông. Vui l√≤ng kh√¥ng ph·∫£n h·ªìi.</p>
                        """.formatted(
                        welcomeRequest.getCode(),
                        welcomeRequest.getDescription(),
                        welcomeRequest.getDiscountPercent()
                );

                emailService.sendHtmlEmail(user.getEmail(), subject, content);

            } catch (Exception e) {
                e.printStackTrace();
            }
        });
    }

    public void createAndSendBirthdayPromotion(User user) {
        CompletableFuture.runAsync(() -> {
            try {
                int currentYear = LocalDate.now().getYear();
                String promotionCode = String.format("BDAY-%d-%d", user.getId(), currentYear);

                // Ki·ªÉm tra xem nƒÉm nay ƒë√£ g·ª≠i qu√† cho user n√†y ch∆∞a
                if (promotionRepository.existsByCode(promotionCode)) {
                    return;
                }

                PromotionRequest birthdayRequest = PromotionRequest.builder()
                        .code(promotionCode)
                        .description("Qu√† m·ª´ng sinh nh·∫≠t t·ª´ DuyTour! Ch√∫c b·∫°n m·ªôt tu·ªïi m·ªõi nhi·ªÅu ni·ªÅm vui v√† nh·ªØng chuy·∫øn ƒëi th√∫ v·ªã.")
                        .discountPercent(25.0) // Gi·∫£m 25%, b·∫°n c√≥ th·ªÉ thay ƒë·ªïi
                        .startAt(Instant.now())
                        .endAt(Instant.now().plus(30, ChronoUnit.DAYS)) // H·∫°n d√πng 30 ng√†y
                        .usageLimit(1) // D√πng 1 l·∫ßn
                        .build();

                this.create(birthdayRequest);

                String subject = "üéÇ Ch√∫c m·ª´ng sinh nh·∫≠t! DuyTour g·ª≠i t·∫∑ng b·∫°n m√≥n qu√† ƒë·∫∑c bi·ªát";
                String content = """
                        <h3>Ch√∫c m·ª´ng sinh nh·∫≠t, %s!</h3>
                        <p>Nh√¢n ng√†y ƒë·∫∑c bi·ªát c·ªßa b·∫°n, DuyTour xin g·ª≠i l·ªùi ch√∫c t·ªët ƒë·∫πp nh·∫•t v√† m·ªôt m√≥n qu√† nh·ªè ƒë·ªÉ b·∫°n c√≥ th√™m ni·ªÅm vui trong nh·ªØng chuy·∫øn ƒëi s·∫Øp t·ªõi:</p>
                        <p><strong>M√£ khuy·∫øn m√£i:</strong> %s</p>
                        <p><strong>∆Øu ƒë√£i:</strong> Gi·∫£m ngay %.0f%% cho l·∫ßn ƒë·∫∑t tour ti·∫øp theo.</p>
                        <p><strong>M√¥ t·∫£:</strong> %s</p>
                        <p><strong>Hi·ªáu l·ª±c:</strong> M√£ c√≥ gi√° tr·ªã trong 30 ng√†y.</p>
                        <p>Ch√∫c b·∫°n m·ªôt tu·ªïi m·ªõi th·∫≠t √Ω nghƒ©a v√† c√≥ nhi·ªÅu h√†nh tr√¨nh ƒë√°ng nh·ªõ!</p>
                        <hr>
                        <p style="font-size:12px;">ƒê√¢y l√† email t·ª± ƒë·ªông. Vui l√≤ng kh√¥ng ph·∫£n h·ªìi.</p>
                        """.formatted(
                        user.getFullName() != null ? user.getFullName() : user.getUsername(),
                        birthdayRequest.getCode(),
                        birthdayRequest.getDiscountPercent(),
                        birthdayRequest.getDescription()
                );

                emailService.sendHtmlEmail(user.getEmail(), subject, content);

            } catch (Exception e) {
                e.printStackTrace();
            }
        });
    }
}